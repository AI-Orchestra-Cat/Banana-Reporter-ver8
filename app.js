// app_integrated.js - v8.0 Áµ±ÂêàÁâà
// „Çª„Ç≠„É•„Ç¢Áâà + ÁÆ°ÁêÜËÄÖÊ©üËÉΩ + CSV/„É°„Éº„É´Âá∫Âäõ + „Çπ„Éû„ÉõÂØæÂøú

// Ë®≠ÂÆöÔºàconfig.js„Åã„ÇâÂèñÂæóÔºâ
let SUPABASE_URL = '';
let SUPABASE_ANON_KEY = '';

// Supabase„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ
let supabaseClient = null;

// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
let currentUser = null;
let currentImageData = null;
let analysisResult = null;
let visualJudgment = null;

// „Ç´„É©„Éº„ÉÅ„É£„Éº„Éà„Éá„Éº„ÇøÔºàË°®Á§∫Áî®„ÅÆ„Åø - Âà§ÂÆö„É≠„Ç∏„ÉÉ„ÇØ„ÅØSupabase„Å´ÁßªË°åÔºâ
let COLOR_CHART_DATA = [];

// „Ç¢„Éó„É™ÂàùÊúüÂåñ
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üçå „Éê„Éä„Éä„É¨„Éù„Éº„Çø„Éº v8.0 Áµ±ÂêàÁâà Ëµ∑Âãï');
    
    try {
        // Ë®≠ÂÆöË™≠„ÅøËæº„Åø
        if (window.APP_CONFIG) {
            SUPABASE_URL = window.APP_CONFIG.SUPABASE_URL;
            SUPABASE_ANON_KEY = window.APP_CONFIG.SUPABASE_ANON_KEY;
        }
        
        // SupabaseÂàùÊúüÂåñ
        if (typeof window.supabase !== 'undefined' && SUPABASE_URL && SUPABASE_ANON_KEY) {
            supabaseClient = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
            console.log('‚úÖ SupabaseÂàùÊúüÂåñÂÆå‰∫Ü');
        } else {
            throw new Error('SupabaseË®≠ÂÆö„Åå‰∏çÊ≠£„Åß„Åô');
        }
        
        // „Ç´„É©„Éº„ÉÅ„É£„Éº„Éà„Éá„Éº„Çø„ÇíÂèñÂæóÔºàË°®Á§∫Áî®Ôºâ
        await loadColorChartData();
        
        // „É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøÂàùÊúüÂåñÔºàlocalStorage‰ΩøÁî®Ôºâ
        initializeUserData();
        
        // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
        setupEventListeners();
        
        // ÁÆ°ÁêÜËÄÖÁîªÈù¢„ÅÆÂàùÊúüÂåñ
        initAdminPage();
        
        console.log('‚úÖ „Ç¢„Éó„É™ÂàùÊúüÂåñÂÆå‰∫Ü');
        
    } catch (error) {
        console.error('‚ùå ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
        alert('„Ç¢„Éó„É™„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
    }
});

// Supabase„Åã„Çâ„Ç´„É©„Éº„ÉÅ„É£„Éº„Éà„Éá„Éº„Çø„ÇíÂèñÂæóÔºàË°®Á§∫Áî®„ÅÆ„ÅøÔºâ
async function loadColorChartData() {
    try {
        const { data, error } = await supabaseClient.rpc('get_color_chart_data');
        
        if (error) throw error;
        
        COLOR_CHART_DATA = data || [];
        console.log('‚úÖ „Ç´„É©„Éº„ÉÅ„É£„Éº„Éà„Éá„Éº„ÇøÂèñÂæóÂÆå‰∫Ü');
        
    } catch (error) {
        console.error('‚ùå „Ç´„É©„Éº„ÉÅ„É£„Éº„Éà„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁî®„ÅÆÂü∫Êú¨„Éá„Éº„Çø
        COLOR_CHART_DATA = [
            { level: 2, name: "„Ç™„Éº„É´„Ç∞„É™„Éº„É≥", color: "#2E7D32" },
            { level: 3, name: "„É©„Ç§„Éà„Ç∞„É™„Éº„É≥", color: "#4CAF50" },
            { level: 4, name: "„Éè„Éº„Éï„Ç∞„É™„Éº„É≥", color: "#8BC34A" },
            { level: 5, name: "„Ç∞„É™„Éº„É≥„ÉÅ„ÉÉ„Éó", color: "#CDDC39" },
            { level: 6, name: "„Éï„É´„Ç§„Ç®„É≠„Éº", color: "#FFEB3B" },
            { level: 7, name: "„Çπ„Çø„Éº", color: "#FFC107" },
            { level: 8, name: "", color: "#FF9800" },
            { level: 9, name: "", color: "#795548" }
        ];
    }
}

// „É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøÂàùÊúüÂåñÔºàlocalStorage‰ΩøÁî®Ôºâ
function initializeUserData() {
    // Â∫óËàó„Éá„Éº„ÇøÔºà„É¶„Éº„Ç∂„ÉºÂÄãÂà•ÁÆ°ÁêÜÔºâ
    let storeData = JSON.parse(localStorage.getItem('storeData')) || {
        'A„ÉÅ„Çß„Éº„É≥': ['Êú¨Â∫ó', 'ÊîØÂ∫ó1', 'ÊîØÂ∫ó2'],
        'B„Çπ„Éà„Ç¢': ['‰∏ñÁî∞Ë∞∑Â∫ó', 'Ê∏ãË∞∑Â∫ó', 'Êñ∞ÂÆøÂ∫ó'],
        'C„Éû„Éº„Ç±„ÉÉ„Éà': ['Â∫ú‰∏≠Â∫ó', 'Ë™øÂ∏ÉÂ∫ó', 'ÂõΩÂàÜÂØ∫Â∫ó']
    };
    
    // ÂïÜÂìÅ„Éá„Éº„Çø
    let productData = JSON.parse(localStorage.getItem('productData')) || [
        '„Éê„Éä„ÉäÔºàÊàøÔºâ', '„Éê„Éä„ÉäÔºàÂçòÂìÅÔºâ'
    ];
    
    // „ÇØ„É¨„Éº„É†Á®ÆÂà•„Éá„Éº„Çø
    let claimTypeData = JSON.parse(localStorage.getItem('claimTypeData')) || [
        'ÈÅéÁÜü', '„Åä„Åï„Çå„Éª„Åç„Åö', 'ËÖê„Çå', 'Êú™ÁÜü', '„Åç„Å∂„Åè', '„ÅÇ„Åä„Å∂„Åè', '„Åù„ÅÆ‰ªñ'
    ];
    
    // „Ç≥„Éº„ÉâÂêçÁß∞Ë®≠ÂÆö
    let codeNames = JSON.parse(localStorage.getItem('bananaCodeNames')) || {
        code1: '„Ç≥„Éº„Éâ1',
        code2: '„Ç≥„Éº„Éâ2', 
        code3: '„Ç≥„Éº„Éâ3'
    };
    
    // „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Å´Ë®≠ÂÆö
    window.storeData = storeData;
    window.productData = productData;
    window.claimTypeData = claimTypeData;
    window.codeNames = codeNames;
    
    // ÂàùÊúü„Éá„Éº„Çø„ÇílocalStorage„Å´‰øùÂ≠ò
    localStorage.setItem('storeData', JSON.stringify(storeData));
    localStorage.setItem('productData', JSON.stringify(productData));
    localStorage.setItem('claimTypeData', JSON.stringify(claimTypeData));
    localStorage.setItem('bananaCodeNames', JSON.stringify(codeNames));
}

// „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
function setupEventListeners() {
    // „É≠„Ç∞„Ç§„É≥„Éú„Çø„É≥
    document.getElementById('loginBtn')?.addEventListener('click', handleLogin);
    
    // ÁîªÂÉèÂÖ•ÂäõÔºà„Çπ„Éû„ÉõÂØæÂøúÔºâ
    document.getElementById('cameraBtn')?.addEventListener('click', () => {
        const cameraInput = document.getElementById('cameraInput');
        if (cameraInput) {
            // „Çπ„Éû„ÉõÂØæÂøúÔºöcaptureÂ±ûÊÄß„ÇíÂãïÁöÑ„Å´Ë®≠ÂÆö
            if (isMobileDevice()) {
                cameraInput.setAttribute('capture', 'environment');
            }
            cameraInput.click();
        }
    });
    
    document.getElementById('fileBtn')?.addEventListener('click', () => {
        document.getElementById('fileInput').click();
    });
    
    document.getElementById('cameraInput')?.addEventListener('change', handleImageSelect);
    document.getElementById('fileInput')?.addEventListener('change', handleImageSelect);
    
    // Ëß£Êûê„Éú„Çø„É≥
    document.getElementById('analyzeBtn')?.addEventListener('click', handleAnalyze);
    
    // CSV/„É°„Éº„É´Âá∫Âäõ„Éú„Çø„É≥
    document.getElementById('exportBtn')?.addEventListener('click', exportAnalysisResultCSV);
    document.getElementById('emailBtn')?.addEventListener('click', sendEmail);
    
    // „Åù„ÅÆ‰ªñ„ÅÆ„Éú„Çø„É≥
    document.getElementById('resetBtn')?.addEventListener('click', resetForm);
    document.getElementById('settingsBtn')?.addEventListener('click', toggleSettings);
    document.getElementById('logoutBtn')?.addEventListener('click', handleLogout);
    
    // Êó•‰ªòÂà∂ÈôêË®≠ÂÆö
    setupDateLimits();
    
    // „Ç´„É©„Éº„ÉÅ„É£„Éº„ÉàË°®Á§∫
    displayColorChart();
    
    // „Éï„Ç©„Éº„É†Ë¶ÅÁ¥†„ÅÆÂàùÊúüÂåñ
    initializeFormElements();
}

// „É¢„Éê„Ç§„É´„Éá„Éê„Ç§„ÇπÂà§ÂÆö
function isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

// Êó•‰ªòÂà∂ÈôêË®≠ÂÆöÔºàÊú™Êù•Êó•‰ªò„ÇíÁÑ°ÂäπÂåñÔºâ
function setupDateLimits() {
    const today = new Date().toISOString().split('T')[0];
    const deliveryDate = document.getElementById('deliveryDate');
    const captureDate = document.getElementById('captureDate');
    
    if (deliveryDate) {
        deliveryDate.max = today;
        deliveryDate.value = today;
    }
    
    if (captureDate) {
        captureDate.max = today;
        captureDate.value = today;
    }
}

// „Ç´„É©„Éº„ÉÅ„É£„Éº„ÉàË°®Á§∫
function displayColorChart() {
    const colorChart = document.getElementById('colorChart');
    if (!colorChart || !COLOR_CHART_DATA.length) return;
    
    colorChart.innerHTML = '';
    
    COLOR_CHART_DATA.forEach(color => {
        // ÂÜÜÂΩ¢„ÅÆ„Ç´„É©„Éº„Ç¢„Ç§„ÉÜ„É†
        const item = document.createElement('div');
        item.className = 'color-item';
        item.dataset.level = color.level;
        item.style.cssText = `
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background-color: ${color.color};
            border: 3px solid transparent;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin: 10px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            position: relative;
        `;
        
        item.innerHTML = `
            <div style="text-align: center; color: white; font-weight: bold; text-shadow: 1px 1px 2px rgba(0,0,0,0.5);">
                <div style="font-size: 14px;">„Ç´„É©„Éº${color.level}</div>
                ${color.name ? `<div style="font-size: 10px; margin-top: 2px;">${color.name}</div>` : ''}
            </div>
        `;
        
        item.onclick = () => selectColor(color.level);
        
        colorChart.appendChild(item);
    });
}

// „Ç´„É©„ÉºÈÅ∏Êäû
window.selectColor = function(level) {
    // Êó¢Â≠ò„ÅÆÈÅ∏Êäû„Çí„ÇØ„É™„Ç¢
    document.querySelectorAll('.color-item').forEach(item => {
        item.style.border = '3px solid transparent';
        item.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
        item.style.transform = 'scale(1)';
    });
    
    // Êñ∞„Åó„ÅÑÈÅ∏Êäû„ÇíË®≠ÂÆö
    const selectedItem = document.querySelector(`[data-level="${level}"]`);
    if (selectedItem) {
        selectedItem.style.border = '3px solid #007bff';
        selectedItem.style.boxShadow = '0 0 10px rgba(0, 123, 255, 0.5), 0 2px 5px rgba(0,0,0,0.3)';
        selectedItem.style.transform = 'scale(1.1)';
    }
    
    // ÈÅ∏ÊäûÁä∂ÊÖã„Çí‰øùÂ≠ò
    visualJudgment = level;
    
    // ÈÅ∏Êäû„ÉÜ„Ç≠„Çπ„ÉàÊõ¥Êñ∞
    const selectedColorText = document.getElementById('selectedColorText');
    if (selectedColorText) {
        const colorInfo = COLOR_CHART_DATA.find(c => c.level === level);
        const colorName = colorInfo ? (colorInfo.name || `„Ç´„É©„Éº${level}`) : `„Ç´„É©„Éº${level}`;
        selectedColorText.textContent = colorName;
    }
    
    // Ëß£Êûê„Éú„Çø„É≥„ÇíÊúâÂäπÂåñ
    const analyzeBtn = document.getElementById('analyzeBtn');
    if (analyzeBtn && currentImageData) {
        analyzeBtn.disabled = false;
    }
}

// „É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ
async function handleLogin() {
    const userId = document.getElementById('userId').value.trim();
    const password = document.getElementById('password').value.trim();
    const loginError = document.getElementById('loginError');
    
    if (!userId || !password) {
        loginError.textContent = '„É¶„Éº„Ç∂„ÉºID„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
        loginError.classList.remove('hidden');
        return;
    }
    
    try {
        // Supabase„ÅßË™çË®ºÔºàÁôªÈå≤„É¶„Éº„Ç∂„Éº„ÅØSupabase„ÅßÁÆ°ÁêÜÔºâ
        const { data, error } = await supabaseClient.rpc('authenticate_user', {
            p_user_id: userId,
            p_password: password
        });
        
        if (error) throw error;
        
        if (data && data.success) {
            currentUser = {
                id: userId,
                email: data.email,
                role: data.role || 'user'
            };
            
            // „É≠„Ç∞„Ç§„É≥Ë®òÈå≤
            await recordLogin(userId);
            
            // ÁîªÈù¢Âàá„ÇäÊõø„Åà
            document.getElementById('authScreen').classList.add('hidden');
            document.getElementById('mainScreen').classList.remove('hidden');
            document.getElementById('currentUserDisplay').textContent = userId;
            
            // ÁÆ°ÁêÜËÄÖ„ÅÆÂ†¥Âêà„ÅØË®≠ÂÆö„Éú„Çø„É≥„ÇíË°®Á§∫
            if (currentUser.role === 'admin') {
                const settingsBtn = document.getElementById('settingsBtn');
                if (settingsBtn) {
                    settingsBtn.style.display = 'inline-block';
                }
            }
            
            loginError.classList.add('hidden');
            
        } else {
            throw new Error('Ë™çË®º„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
        
    } catch (error) {
        console.error('„É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº:', error);
        loginError.textContent = '„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇID„Éª„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
        loginError.classList.remove('hidden');
    }
}

// „É≠„Ç∞„Ç§„É≥Ë®òÈå≤
async function recordLogin(userId) {
    try {
        await supabaseClient.rpc('record_login', {
            p_user_id: userId,
            p_ip_address: 'unknown',
            p_user_agent: navigator.userAgent
        });
    } catch (error) {
        console.error('„É≠„Ç∞„Ç§„É≥Ë®òÈå≤„Ç®„É©„Éº:', error);
    }
}

// ÁîªÂÉèÈÅ∏ÊäûÂá¶ÁêÜ
function handleImageSelect(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    // ÂâçÂõû„ÅÆÈÅ∏Êäû„Çí„ÇØ„É™„Ç¢
    event.target.value = '';
    
    // ÂâçÂõû„ÅÆ„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢
    clearPreviousData();
    
    const reader = new FileReader();
    reader.onload = function(e) {
        currentImageData = e.target.result;
        displayImagePreview(e.target.result);
        
        // Ëß£Êûê„Éú„Çø„É≥„ÅÆÁä∂ÊÖãÊõ¥Êñ∞
        updateAnalyzeButton();
    };
    reader.readAsDataURL(file);
}

// ÂâçÂõû„Éá„Éº„Çø„ÇØ„É™„Ç¢
function clearPreviousData() {
    analysisResult = null;
    visualJudgment = null;
    
    // „Éï„Ç©„Éº„É†„ÇØ„É™„Ç¢
    document.getElementById('chainName').value = '';
    document.getElementById('storeName').value = '';
    document.getElementById('productName').value = '';
    document.getElementById('claimType').value = '';
    document.getElementById('commentText').value = '';
    document.getElementById('code1').value = '';
    document.getElementById('code2').value = '';
    document.getElementById('code3').value = '';
    
    // Êó•‰ªò„Çí‰ªäÊó•„Å´Ë®≠ÂÆö
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('deliveryDate').value = today;
    document.getElementById('captureDate').value = today;
    
    // „Ç´„É©„ÉºÈÅ∏Êäû„Çí„ÇØ„É™„Ç¢
    document.querySelectorAll('.color-item').forEach(item => {
        item.style.border = '2px solid transparent';
        item.style.boxShadow = 'none';
        item.style.transform = 'scale(1)';
    });
    
    document.getElementById('selectedColorText').textContent = 'Êú™ÈÅ∏Êäû';
    
    // ÁµêÊûú„Ç´„Éº„ÉâÈùûË°®Á§∫
    document.getElementById('resultCard').classList.add('hidden');
    
    // „Ç®„ÇØ„Çπ„Éù„Éº„Éà„Éú„Çø„É≥ÁÑ°ÂäπÂåñ
    document.getElementById('exportBtn').disabled = true;
    document.getElementById('emailBtn').disabled = true;
}

// ÁîªÂÉè„Éó„É¨„Éì„É•„ÉºË°®Á§∫
function displayImagePreview(imageSrc) {
    const imagePreview = document.getElementById('imagePreview');
    imagePreview.innerHTML = `<img src="${imageSrc}" style="max-width: 100%; max-height: 300px; border-radius: 8px;">`;
}

// Ëß£Êûê„Éú„Çø„É≥Áä∂ÊÖãÊõ¥Êñ∞
function updateAnalyzeButton() {
    const analyzeBtn = document.getElementById('analyzeBtn');
    if (analyzeBtn) {
        analyzeBtn.disabled = !(currentImageData && visualJudgment);
    }
}

// „É°„Ç§„É≥Ëß£ÊûêÂá¶ÁêÜÔºàHSVËß£Êûê„Çí„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅßÂÆüË°å„Åó„ÄÅÂà§ÂÆö„ÇíSupabase„ÅßÂÆüË°åÔºâ
async function handleAnalyze() {
    if (!currentImageData || !visualJudgment) {
        alert('ÁîªÂÉè„ÇíÈÅ∏Êäû„Åó„ÄÅÁõÆË¶ñÈÅ∏Êäû„ÇíË°å„Å£„Å¶„Åã„ÇâËß£Êûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }
    
    const analyzeBtn = document.getElementById('analyzeBtn');
    const originalText = analyzeBtn.textContent;
    
    try {
        analyzeBtn.textContent = 'üîç Ëß£Êûê‰∏≠...';
        analyzeBtn.disabled = true;
        
        // „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çµ„Ç§„Éâ„ÅßHSVËß£ÊûêÂÆüË°å
        const hsvData = await performClientSideHSVAnalysis(currentImageData);
        
        // Supabase„ÅßÂà§ÂÆöÂÆüË°åÔºà‰ºÅÊ•≠ÁßòÂØÜ„ÅØ„Çµ„Éº„Éê„Éº„Çµ„Ç§„ÉâÔºâ
        const { data, error } = await supabaseClient.rpc('analyze_banana_color', {
            p_user_id: currentUser.id,
            p_image_hsv_data: hsvData
        });
        
        if (error) throw error;
        
        analysisResult = data;
        
        // ÁµêÊûúË°®Á§∫
        displayAnalysisResult(analysisResult);
        
        // „Ç®„ÇØ„Çπ„Éù„Éº„Éà„Éú„Çø„É≥ÊúâÂäπÂåñ
        enableExportButtons();
        
    } catch (error) {
        console.error('Ëß£Êûê„Ç®„É©„Éº:', error);
        alert('Ëß£Êûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message);
    } finally {
        analyzeBtn.textContent = originalText;
        analyzeBtn.disabled = false;
    }
}

// „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çµ„Ç§„ÉâHSVËß£ÊûêÔºàÂü∫Êú¨ÁöÑ„Å™ÁîªÂÉèÂá¶ÁêÜ„ÅÆ„ÅøÔºâ
async function performClientSideHSVAnalysis(imageData) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = function() {
            try {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                // „Çπ„Éû„ÉõÁîªÂÉèÂØæÂøúÔºöÊúÄÂ§ß„Çµ„Ç§„Ç∫„ÇíÂà∂Èôê
                const MAX_SIZE = 1000;
                let width = img.width;
                let height = img.height;
                
                if (width > MAX_SIZE || height > MAX_SIZE) {
                    const scale = Math.min(MAX_SIZE / width, MAX_SIZE / height);
                    width = Math.floor(width * scale);
                    height = Math.floor(height * scale);
                }
                
                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);
                
                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                const pixels = imageData.data;
                
                // Âü∫Êú¨ÁöÑ„Å™„Éî„ÇØ„Çª„É´ÊÉÖÂ†±„ÅÆ„Åø„ÇíÂèéÈõÜÔºàÂà§ÂÆö„É≠„Ç∏„ÉÉ„ÇØ„ÅØSupabase„ÅßÂÆüË°åÔºâ
                const colorCounts = {
                    'Á∑ëÁ≥ª': 0,
                    'ÈªÑÁ∑ëÁ≥ª': 0,
                    'ÈªÑËâ≤Á≥ª': 0,
                    'ÊñëÁÇπÁ≥ª': 0,
                    'Ë§êËâ≤Á≥ª': 0
                };
                
                let totalPixels = 0;
                const sampleStep = 4;
                
                for (let i = 0; i < pixels.length; i += 4 * sampleStep) {
                    const r = pixels[i];
                    const g = pixels[i + 1];
                    const b = pixels[i + 2];
                    const a = pixels[i + 3];
                    
                    if (a < 128) continue;
                    
                    totalPixels++;
                    
                    // Á∞°ÊòìÁöÑ„Å™Ëâ≤ÂàÜÈ°ûÔºàË©≥Á¥∞„ÅØSupabase„ÅßÂÆüË°åÔºâ
                    const hsv = rgbToHsv(r, g, b);
                    
                    // Â§ß„Åæ„Åã„Å™Ëâ≤ÂàÜÈ°û„ÅÆ„Åø
                    if (hsv.h >= 60 && hsv.h <= 180 && hsv.s >= 30) {
                        colorCounts['Á∑ëÁ≥ª']++;
                    } else if (hsv.h >= 30 && hsv.h <= 80 && hsv.s >= 40) {
                        colorCounts['ÈªÑËâ≤Á≥ª']++;
                    } else if (hsv.h >= 15 && hsv.h <= 45 && hsv.s >= 50) {
                        colorCounts['ÊñëÁÇπÁ≥ª']++;
                    } else if (hsv.h >= 0 && hsv.h <= 30 && hsv.s >= 30) {
                        colorCounts['Ë§êËâ≤Á≥ª']++;
                    } else {
                        colorCounts['ÈªÑÁ∑ëÁ≥ª']++;
                    }
                }
                
                resolve({
                    totalPixels: totalPixels,
                    colorCounts: colorCounts,
                    timestamp: Date.now()
                });
                
            } catch (error) {
                reject(error);
            }
        };
        
        img.onerror = () => reject(new Error('ÁîªÂÉè„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'));
        img.src = imageData;
    });
}

// RGB‚ÜíHSVÂ§âÊèõÔºàÂü∫Êú¨ÁöÑ„Å™Ëâ≤Á©∫ÈñìÂ§âÊèõ„ÅÆ„ÅøÔºâ
function rgbToHsv(r, g, b) {
    r /= 255;
    g /= 255;
    b /= 255;
    
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    const delta = max - min;
    
    let h = 0;
    if (delta !== 0) {
        if (max === r) h = ((g - b) / delta) % 6;
        else if (max === g) h = (b - r) / delta + 2;
        else h = (r - g) / delta + 4;
    }
    h = Math.round(h * 60);
    if (h < 0) h += 360;
    
    const s = max === 0 ? 0 : Math.round((delta / max) * 100);
    const v = Math.round(max * 100);
    
    return { h, s, v };
}

// Ëß£ÊûêÁµêÊûúË°®Á§∫
function displayAnalysisResult(result) {
    const resultCard = document.getElementById('resultCard');
    const resultContent = document.getElementById('resultContent');
    
    if (!resultCard || !resultContent || !result) return;
    
    const detectedColor = COLOR_CHART_DATA.find(c => c.level === result.detectedLevel);
    const colorName = detectedColor ? (detectedColor.name || `„Ç´„É©„Éº${result.detectedLevel}`) : `„Ç´„É©„Éº${result.detectedLevel}`;
    const colorColor = detectedColor ? detectedColor.color : '#666';
    
    const manualColor = COLOR_CHART_DATA.find(c => c.level === visualJudgment);
    const manualColorName = manualColor ? (manualColor.name || `„Ç´„É©„Éº${visualJudgment}`) : `„Ç´„É©„Éº${visualJudgment}`;
    
    const matchResult = result.detectedLevel === visualJudgment ? '‚úÖ ‰∏ÄËá¥' : '‚ùå ‰∏ç‰∏ÄËá¥';
    
    let html = `
        <div style="margin-bottom: 20px;">
            <h4 style="color: #333; margin-bottom: 15px;">üìä Ëß£ÊûêÁµêÊûú</h4>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 20px;">
                <div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); padding: 15px; border-radius: 8px; border-left: 4px solid ${colorColor};">
                    <div style="font-weight: bold; color: #333; margin-bottom: 5px;">ü§ñ Ëá™ÂãïËß£ÊûêÁµêÊûú</div>
                    <div style="font-size: 18px; font-weight: bold; color: ${colorColor};">${colorName}</div>
                </div>
                
                <div style="background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); padding: 15px; border-radius: 8px; border-left: 4px solid #2196f3;">
                    <div style="font-weight: bold; color: #333; margin-bottom: 5px;">üëÅÔ∏è ÁõÆË¶ñÈÅ∏Êäû</div>
                    <div style="font-size: 18px; font-weight: bold; color: #2196f3;">${manualColorName}</div>
                </div>
            </div>
            
            <div style="text-align: center; padding: 15px; background: ${result.detectedLevel === visualJudgment ? '#d4edda' : '#f8d7da'}; border-radius: 8px; margin-bottom: 20px;">
                <div style="font-size: 18px; font-weight: bold; color: ${result.detectedLevel === visualJudgment ? '#155724' : '#721c24'};">
                    ${matchResult}
                </div>
            </div>
            
            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">
                <div style="font-weight: bold; margin-bottom: 10px;">üìà Ëß£ÊûêÁµ±Ë®à</div>
                <div style="font-size: 14px; color: #6c757d;">
                    Á∑è„Éî„ÇØ„Çª„É´Êï∞: ${result.totalPixels?.toLocaleString() || 'N/A'}<br>
                    Ëß£ÊûêÊó•ÊôÇ: ${new Date().toLocaleString()}
                </div>
            </div>
        </div>
    `;
    
    resultContent.innerHTML = html;
    resultCard.classList.remove('hidden');
}

// „Ç®„ÇØ„Çπ„Éù„Éº„Éà„Éú„Çø„É≥ÊúâÂäπÂåñ
function enableExportButtons() {
    document.getElementById('exportBtn').disabled = false;
    document.getElementById('emailBtn').disabled = false;
}

// CSVÂá∫ÂäõÔºàÂÆåÂÖ®ÁâàÔºâ
window.exportAnalysisResultCSV = function() {
    if (!analysisResult) {
        alert('Ëß£Êûê„ÇíÂÆüË°å„Åó„Å¶„Åã„ÇâCSVÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }
    
    try {
        const now = new Date();
        const timestamp = now.toISOString().replace(/[:.]/g, '-');
        
        // „Éï„Ç©„Éº„É†ÊÉÖÂ†±ÂèñÂæó
        const formData = {
            '„ÉÅ„Çß„Éº„É≥Âêç': document.getElementById('chainName')?.value || '',
            'Â∫óËàóÂêç': document.getElementById('storeName')?.value || '',
            'ÂïÜÂìÅÂêç': document.getElementById('productName')?.value || '',
            '„ÇØ„É¨„Éº„É†Á®ÆÂà•': document.getElementById('claimType')?.value || '',
            'Á¥çÂìÅÊó•': document.getElementById('deliveryDate')?.value || '',
            'ÊíÆÂΩ±Êó•': document.getElementById('captureDate')?.value || '',
            '„Ç≥„É°„É≥„Éà': document.getElementById('commentText')?.value || '',
            [window.codeNames?.code1 || '„Ç≥„Éº„Éâ1']: document.getElementById('code1')?.value || '',
            [window.codeNames?.code2 || '„Ç≥„Éº„Éâ2']: document.getElementById('code2')?.value || '',
            [window.codeNames?.code3 || '„Ç≥„Éº„Éâ3']: document.getElementById('code3')?.value || ''
        };
        
        // Ëß£ÊûêÊÉÖÂ†±
        const analysisData = {
            'Ëß£ÊûêÊó•ÊôÇ': now.toLocaleString(),
            'Á∑è„Éî„ÇØ„Çª„É´Êï∞': analysisResult.totalPixels || 0,
            'ÁõÆË¶ñÈÅ∏Êäû„Ç´„É©„Éº': `„Ç´„É©„Éº${visualJudgment}`,
            'Ëá™ÂãïËß£Êûê„Ç´„É©„Éº': `„Ç´„É©„Éº${analysisResult.detectedLevel}`,
            '‰∏ÄËá¥ÁµêÊûú': analysisResult.detectedLevel === visualJudgment ? '‰∏ÄËá¥' : '‰∏ç‰∏ÄËá¥'
        };
        
        // CSVÁîüÊàê
        const headers = [...Object.keys(formData), ...Object.keys(analysisData)];
        const values = [...Object.values(formData), ...Object.values(analysisData)];
        
        // CSV„Éá„Éº„Çø„ÇíÁîüÊàêÔºà„Ç®„Çπ„Ç±„Éº„ÉóÂá¶ÁêÜ‰ªò„ÅçÔºâ
        const escapeCSV = (val) => {
            if (typeof val === 'string' && (val.includes(',') || val.includes('"') || val.includes('\n'))) {
                return `"${val.replace(/"/g, '""')}"`;
            }
            return val;
        };
        
        const csvContent = '\ufeff' + [
            headers.map(escapeCSV).join(','),
            values.map(escapeCSV).join(',')
        ].join('\n');
        
        // „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `banana_analysis_${timestamp}_${formData['„ÉÅ„Çß„Éº„É≥Âêç']}_${formData['Â∫óËàóÂêç']}_„Ç´„É©„Éº${analysisResult.detectedLevel}.csv`;
        link.click();
        
        URL.revokeObjectURL(url);
        alert('‚úÖ Ëß£ÊûêÁµêÊûú„ÇíCSV„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Åæ„Åó„Åü');
        
    } catch (error) {
        console.error('CSVÂá∫Âäõ„Ç®„É©„Éº:', error);
        alert('‚ùå CSVÂá∫Âäõ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// „É°„Éº„É´ÈÄÅ‰ø°ÔºàÂÆåÂÖ®ÁâàÔºâ
window.sendEmail = function() {
    if (!analysisResult) {
        alert('Ëß£Êûê„ÇíÂÆüË°å„Åó„Å¶„Åã„Çâ„É°„Éº„É´ÈÄÅ‰ø°„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }
    
    const dateStr = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const mailCount = getTodayMailCount() + 1;
    const uniqueCode = `${currentUser.id}${dateStr}${String(mailCount).padStart(3, '0')}`;
    
    incrementMailCount();
    
    const subject = `„Éê„Éä„ÉäÂìÅË≥™„É¨„Éù„Éº„Éà_${uniqueCode}`;
    const chainName = document.getElementById('chainName')?.value || '';
    const storeName = document.getElementById('storeName')?.value || '';
    
    const body = `„Éê„Éä„ÉäÂìÅË≥™„É¨„Éù„Éº„Éà
    
„ÄêÂü∫Êú¨ÊÉÖÂ†±„Äë
„ÉÅ„Çß„Éº„É≥Âêç: ${chainName}
Â∫óËàóÂêç: ${storeName}
Ëß£ÊûêÊó•ÊôÇ: ${new Date().toLocaleString()}

„ÄêËß£ÊûêÁµêÊûú„Äë
ÁõÆË¶ñÈÅ∏Êäû: „Ç´„É©„Éº${visualJudgment}
Ëá™ÂãïËß£Êûê: „Ç´„É©„Éº${analysisResult.detectedLevel}
Âà§ÂÆöÁµêÊûú: ${analysisResult.detectedLevel === visualJudgment ? '‰∏ÄËá¥' : '‰∏ç‰∏ÄËá¥'}

‚ÄªCSV„Éï„Ç°„Ç§„É´„Å®ÁîªÂÉè„ÇíÊ∑ª‰ªò„Åó„Å¶„Åè„Å†„Åï„ÅÑ`;
    
    const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    window.location.href = mailtoLink;
}

// „É°„Éº„É´ÈÄÅ‰ø°ÂõûÊï∞ÁÆ°ÁêÜ
function getTodayMailCount() {
    const today = new Date().toISOString().slice(0, 10);
    const key = `mailCount_${currentUser.id}_${today}`;
    return parseInt(localStorage.getItem(key) || '0');
}

function incrementMailCount() {
    const today = new Date().toISOString().slice(0, 10);
    const key = `mailCount_${currentUser.id}_${today}`;
    const count = getTodayMailCount();
    localStorage.setItem(key, (count + 1).toString());
    return count + 1;
}

// ÁÆ°ÁêÜËÄÖÁîªÈù¢ÂàùÊúüÂåñ
function initAdminPage() {
    // ÁÆ°ÁêÜËÄÖÊ©üËÉΩ„ÅÆÂàùÊúüÂåñ
    const adminSettingsSection = document.getElementById('adminSettingsSection');
    if (adminSettingsSection && currentUser?.role === 'admin') {
        adminSettingsSection.style.display = 'block';
        
        // ÁÆ°ÁêÜËÄÖÁî®Áµ±Ë®àË°®Á§∫
        loadAdminStatistics();
    }
}

// ÁÆ°ÁêÜËÄÖÁµ±Ë®àÊÉÖÂ†±„ÅÆË™≠„ÅøËæº„Åø
async function loadAdminStatistics() {
    if (currentUser?.role !== 'admin') return;
    
    try {
        // „É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜÊÉÖÂ†±„ÇíÂèñÂæó
        const { data: userStats, error } = await supabaseClient.rpc('get_admin_user_management');
        
        if (!error && userStats) {
            displayAdminStatistics(userStats);
        }
    } catch (error) {
        console.error('ÁÆ°ÁêÜËÄÖÁµ±Ë®àÂèñÂæó„Ç®„É©„Éº:', error);
    }
}

// ÁÆ°ÁêÜËÄÖÁµ±Ë®àË°®Á§∫
function displayAdminStatistics(stats) {
    const container = document.getElementById('adminStatsContainer');
    if (!container) return;
    
    let html = `
        <div style="background: #fff; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h4>üìä „Ç∑„Çπ„ÉÜ„É†Âà©Áî®Áµ±Ë®à</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
    `;
    
    if (Array.isArray(stats)) {
        stats.forEach(user => {
            html += `
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #007bff;">
                    <div style="font-weight: bold; color: #333;">${user.user_id}</div>
                    <div style="font-size: 14px; color: #6c757d; margin-top: 5px;">
                        ‰ªäÊó•: ${user.today_logins || 0}Âõû / ${user.max_daily_logins || 50}Âõû<br>
                        ‰ªäÊúà: ${user.month_logins || 0}Âõû / ${user.max_monthly_logins || 1000}Âõû<br>
                        Áä∂ÊÖã: ${user.is_blocked ? '‚ùå „Éñ„É≠„ÉÉ„ÇØ‰∏≠' : '‚úÖ „Ç¢„ÇØ„ÉÜ„Ç£„Éñ'}
                    </div>
                </div>
            `;
        });
    }
    
    html += `
            </div>
        </div>
    `;
    
    container.innerHTML = html;
}

// „Éï„Ç©„Éº„É†„É™„Çª„ÉÉ„Éà
function resetForm() {
    if (confirm('„Éï„Ç©„Éº„É†„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åô„ÅãÔºü\nÂÖ•ÂäõÂÜÖÂÆπ„Åå„Åô„Åπ„Å¶ÂâäÈô§„Åï„Çå„Åæ„Åô„ÄÇ')) {
        clearPreviousData();
        currentImageData = null;
        
        // ÁîªÂÉè„Éó„É¨„Éì„É•„Éº„ÇÇ„ÇØ„É™„Ç¢
        document.getElementById('imagePreview').innerHTML = '<div class="image-placeholder">ÁîªÂÉè„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì</div>';
        
        // Ëß£Êûê„Éú„Çø„É≥ÁÑ°ÂäπÂåñ
        document.getElementById('analyzeBtn').disabled = true;
    }
}

// Ë®≠ÂÆöÁîªÈù¢Ë°®Á§∫/ÈùûË°®Á§∫
function toggleSettings() {
    const settingsPanel = document.getElementById('colorAnalysisSettings');
    if (settingsPanel) {
        settingsPanel.classList.toggle('hidden');
        
        // Ë®≠ÂÆöÁîªÈù¢„ÇíË°®Á§∫„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅ„É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøÁÆ°ÁêÜÁîªÈù¢„ÇíË°®Á§∫
        if (!settingsPanel.classList.contains('hidden')) {
            displayUserDataManagement();
            
            // ÁÆ°ÁêÜËÄÖ„ÅÆÂ†¥Âêà„ÅØÁÆ°ÁêÜËÄÖÊ©üËÉΩ„ÇÇË°®Á§∫
            if (currentUser?.role === 'admin') {
                loadAdminStatistics();
            }
        }
    }
}

// „É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøÁÆ°ÁêÜÁîªÈù¢Ë°®Á§∫
function displayUserDataManagement() {
    // „Éû„Çπ„Çø„Éá„Éº„ÇøÁÆ°ÁêÜ„Çª„ÇØ„Ç∑„Éß„É≥„ÅÆ„ÅøË°®Á§∫Ôºà„Ç´„É©„ÉºË®≠ÂÆö„ÅØÈô§Â§ñÔºâ
    displayMasterDataManagement();
    displayCodeNameManagement();
}

// „Éû„Çπ„Çø„Éá„Éº„ÇøÁÆ°ÁêÜË°®Á§∫
function displayMasterDataManagement() {
    displayChainMaster();
    displayStoreMaster();
    displayProductMaster();
    displayClaimTypeMaster();
}

// „ÉÅ„Çß„Éº„É≥Âêç„Éû„Çπ„ÇøË°®Á§∫
function displayChainMaster() {
    const container = document.getElementById('chainMasterContainer');
    if (!container) return;
    
    const chains = Object.keys(window.storeData || {});
    
    let html = `
        <div style="background: #fff; padding: 15px; border: 1px solid #ddd; border-radius: 8px;">
            <div style="margin-bottom: 10px;">
                <input type="text" id="newChainInput" placeholder="Êñ∞„Åó„ÅÑ„ÉÅ„Çß„Éº„É≥Âêç" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; margin-right: 10px;">
                <button class="btn btn-primary btn-sm" onclick="addNewChain()">ËøΩÂä†</button>
            </div>
            <div id="chainTagsContainer">
    `;
    
    chains.forEach(chain => {
        html += `
            <span style="display: inline-block; background: #e9ecef; padding: 5px 10px; margin: 2px; border-radius: 15px; font-size: 12px;">
                ${chain}
                <button onclick="removeChain('${chain}')" style="margin-left: 5px; background: none; border: none; color: #dc3545; cursor: pointer;">√ó</button>
            </span>
        `;
    });
    
    html += `
            </div>
        </div>
    `;
    
    container.innerHTML = html;
    updateChainOptions();
}

// Êñ∞„Åó„ÅÑ„ÉÅ„Çß„Éº„É≥ËøΩÂä†
window.addNewChain = function() {
    const input = document.getElementById('newChainInput');
    const newChain = input.value.trim();
    
    if (!newChain) {
        alert('„ÉÅ„Çß„Éº„É≥Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }
    
    if (window.storeData[newChain]) {
        alert('„Åì„ÅÆ„ÉÅ„Çß„Éº„É≥Âêç„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô');
        return;
    }
    
    window.storeData[newChain] = [];
    input.value = '';
    
    localStorage.setItem('storeData', JSON.stringify(window.storeData));
    displayChainMaster();
}

// „ÉÅ„Çß„Éº„É≥ÂâäÈô§
window.removeChain = function(chainName) {
    if (confirm(`„Äå${chainName}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü\nÈñ¢ÈÄ£„Åô„ÇãÂ∫óËàó„ÇÇÂâäÈô§„Åï„Çå„Åæ„Åô„ÄÇ`)) {
        delete window.storeData[chainName];
        localStorage.setItem('storeData', JSON.stringify(window.storeData));
        displayChainMaster();
        displayStoreMaster();
    }
}

// „ÉÅ„Çß„Éº„É≥ÈÅ∏ÊäûËÇ¢Êõ¥Êñ∞
function updateChainOptions() {
    const chainSelect = document.getElementById('chainName');
    if (!chainSelect) return;
    
    const currentValue = chainSelect.value;
    chainSelect.innerHTML = '<option value="">ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>';
    
    Object.keys(window.storeData || {}).forEach(chain => {
        const option = document.createElement('option');
        option.value = chain;
        option.textContent = chain;
        chainSelect.appendChild(option);
    });
    
    if (currentValue && window.storeData[currentValue]) {
        chainSelect.value = currentValue;
    }
    
    updateStoreOptions();
}

// Â∫óËàó„Éû„Çπ„ÇøË°®Á§∫
function displayStoreMaster() {
    const container = document.getElementById('storeMasterContainer');
    if (!container) return;
    
    const chains = Object.keys(window.storeData || {});
    
    let html = `
        <div style="background: #fff; padding: 15px; border: 1px solid #ddd; border-radius: 8px;">
            <div style="margin-bottom: 10px;">
                <select id="storeChainSelect" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; margin-right: 10px;">
                    <option value="">„ÉÅ„Çß„Éº„É≥„ÇíÈÅ∏Êäû</option>
    `;
    
    chains.forEach(chain => {
        html += `<option value="${chain}">${chain}</option>`;
    });
    
    html += `
                </select>
                <input type="text" id="newStoreInput" placeholder="Â∫óËàóÂêç" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; margin-right: 10px;">
                <button class="btn btn-primary btn-sm" onclick="addNewStore()">ËøΩÂä†</button>
            </div>
            <div id="storeTagsContainer">
    `;
    
    Object.entries(window.storeData || {}).forEach(([chain, stores]) => {
        if (stores.length > 0) {
            html += `<div style="margin-bottom: 10px;"><strong>${chain}:</strong><br>`;
            stores.forEach(store => {
                html += `
                    <span style="display: inline-block; background: #d1ecf1; padding: 4px 8px; margin: 2px; border-radius: 12px; font-size: 11px;">
                        ${store}
                        <button onclick="removeStore('${chain}', '${store}')" style="margin-left: 5px; background: none; border: none; color: #dc3545; cursor: pointer;">√ó</button>
                    </span>
                `;
            });
            html += '</div>';
        }
    });
    
    html += `
            </div>
        </div>
    `;
    
    container.innerHTML = html;
}

// Êñ∞„Åó„ÅÑÂ∫óËàóËøΩÂä†
window.addNewStore = function() {
    const chainSelect = document.getElementById('storeChainSelect');
    const storeInput = document.getElementById('newStoreInput');
    const selectedChain = chainSelect.value;
    const newStore = storeInput.value.trim();
    
    if (!selectedChain) {
        alert('„ÉÅ„Çß„Éº„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }
    
    if (!newStore) {
        alert('Â∫óËàóÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }
    
    if (!window.storeData[selectedChain]) {
        window.storeData[selectedChain] = [];
    }
    
    if (window.storeData[selectedChain].includes(newStore)) {
        alert('„Åì„ÅÆÂ∫óËàóÂêç„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô');
        return;
    }
    
    window.storeData[selectedChain].push(newStore);
    storeInput.value = '';
    
    localStorage.setItem('storeData', JSON.stringify(window.storeData));
    displayStoreMaster();
    updateStoreOptions();
}

// Â∫óËàóÂâäÈô§
window.removeStore = function(chainName, storeName) {
    if (confirm(`„Äå${storeName}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`)) {
        window.storeData[chainName] = window.storeData[chainName].filter(store => store !== storeName);
        localStorage.setItem('storeData', JSON.stringify(window.storeData));
        displayStoreMaster();
        updateStoreOptions();
    }
}

// Â∫óËàóÈÅ∏ÊäûËÇ¢Êõ¥Êñ∞
function updateStoreOptions() {
    const chainSelect = document.getElementById('chainName');
    const storeSelect = document.getElementById('storeName');
    
    if (!chainSelect || !storeSelect) return;
    
    const selectedChain = chainSelect.value;
    storeSelect.innerHTML = '<option value="">„ÉÅ„Çß„Éº„É≥„ÇíÂÖà„Å´ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>';
    
    if (selectedChain && window.storeData[selectedChain]) {
        storeSelect.innerHTML = '<option value="">ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>';
        window.storeData[selectedChain].forEach(store => {
            const option = document.createElement('option');
            option.value = store;
            option.textContent = store;
            storeSelect.appendChild(option);
        });
    }
}

// ÂïÜÂìÅ„Éû„Çπ„ÇøË°®Á§∫
function displayProductMaster() {
    const container = document.getElementById('productMasterContainer');
    if (!container) return;
    
    const products = window.productData || [];
    
    let html = `
        <div style="background: #fff; padding: 15px; border: 1px solid #ddd; border-radius: 8px;">
            <div style="margin-bottom: 10px;">
                <input type="text" id="newProductInput" placeholder="Êñ∞„Åó„ÅÑÂïÜÂìÅÂêç" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; margin-right: 10px;">
                <button class="btn btn-primary btn-sm" onclick="addNewProduct()">ËøΩÂä†</button>
            </div>
            <div>
    `;
    
    products.forEach(product => {
        html += `
            <span style="display: inline-block; background: #fff3cd; padding: 5px 10px; margin: 2px; border-radius: 15px; font-size: 12px;">
                ${product}
                <button onclick="removeProduct('${product}')" style="margin-left: 5px; background: none; border: none; color: #dc3545; cursor: pointer;">√ó</button>
            </span>
        `;
    });
    
    html += `
            </div>
        </div>
    `;
    
    container.innerHTML = html;
    updateProductOptions();
}

// Êñ∞„Åó„ÅÑÂïÜÂìÅËøΩÂä†
window.addNewProduct = function() {
    const input = document.getElementById('newProductInput');
    const newProduct = input.value.trim();
    
    if (!newProduct) {
        alert('ÂïÜÂìÅÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }
    
    if (window.productData.includes(newProduct)) {
        alert('„Åì„ÅÆÂïÜÂìÅÂêç„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô');
        return;
    }
    
    window.productData.push(newProduct);
    input.value = '';
    
    localStorage.setItem('productData', JSON.stringify(window.productData));
    displayProductMaster();
}

// ÂïÜÂìÅÂâäÈô§
window.removeProduct = function(productName) {
    if (confirm(`„Äå${productName}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`)) {
        window.productData = window.productData.filter(product => product !== productName);
        localStorage.setItem('productData', JSON.stringify(window.productData));
        displayProductMaster();
        updateProductOptions();
    }
}

// ÂïÜÂìÅÈÅ∏ÊäûËÇ¢Êõ¥Êñ∞
function updateProductOptions() {
    const productSelect = document.getElementById('productName');
    if (!productSelect) return;
    
    const currentValue = productSelect.value;
    productSelect.innerHTML = '<option value="">ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>';
    
    window.productData.forEach(product => {
        const option = document.createElement('option');
        option.value = product;
        option.textContent = product;
        productSelect.appendChild(option);
    });
    
    if (currentValue && window.productData.includes(currentValue)) {
        productSelect.value = currentValue;
    }
}

// „ÇØ„É¨„Éº„É†Á®ÆÂà•„Éû„Çπ„ÇøË°®Á§∫
function displayClaimTypeMaster() {
    const container = document.getElementById('claimTypeMasterContainer');
    if (!container) return;
    
    const claimTypes = window.claimTypeData || [];
    
    let html = `
        <div style="background: #fff; padding: 15px; border: 1px solid #ddd; border-radius: 8px;">
            <div style="margin-bottom: 10px;">
                <input type="text" id="newClaimTypeInput" placeholder="Êñ∞„Åó„ÅÑ„ÇØ„É¨„Éº„É†Á®ÆÂà•" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; margin-right: 10px;">
                <button class="btn btn-primary btn-sm" onclick="addNewClaimType()">ËøΩÂä†</button>
            </div>
            <div>
    `;
    
    claimTypes.forEach(claimType => {
        html += `
            <span style="display: inline-block; background: #f8d7da; padding: 5px 10px; margin: 2px; border-radius: 15px; font-size: 12px;">
                ${claimType}
                <button onclick="removeClaimType('${claimType}')" style="margin-left: 5px; background: none; border: none; color: #dc3545; cursor: pointer;">√ó</button>
            </span>
        `;
    });
    
    html += `
            </div>
        </div>
    `;
    
    container.innerHTML = html;
    updateClaimTypeOptions();
}

// Êñ∞„Åó„ÅÑ„ÇØ„É¨„Éº„É†Á®ÆÂà•ËøΩÂä†
window.addNewClaimType = function() {
    const input = document.getElementById('newClaimTypeInput');
    const newClaimType = input.value.trim();
    
    if (!newClaimType) {
        alert('„ÇØ„É¨„Éº„É†Á®ÆÂà•„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }
    
    if (window.claimTypeData.includes(newClaimType)) {
        alert('„Åì„ÅÆ„ÇØ„É¨„Éº„É†Á®ÆÂà•„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô');
        return;
    }
    
    window.claimTypeData.push(newClaimType);
    input.value = '';
    
    localStorage.setItem('claimTypeData', JSON.stringify(window.claimTypeData));
    displayClaimTypeMaster();
}

// „ÇØ„É¨„Éº„É†Á®ÆÂà•ÂâäÈô§
window.removeClaimType = function(claimType) {
    if (confirm(`„Äå${claimType}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`)) {
        window.claimTypeData = window.claimTypeData.filter(type => type !== claimType);
        localStorage.setItem('claimTypeData', JSON.stringify(window.claimTypeData));
        displayClaimTypeMaster();
        updateClaimTypeOptions();
    }
}

// „ÇØ„É¨„Éº„É†Á®ÆÂà•ÈÅ∏ÊäûËÇ¢Êõ¥Êñ∞
function updateClaimTypeOptions() {
    const claimTypeSelect = document.getElementById('claimType');
    if (!claimTypeSelect) return;
    
    const currentValue = claimTypeSelect.value;
    claimTypeSelect.innerHTML = '<option value="">ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>';
    
    window.claimTypeData.forEach(claimType => {
        const option = document.createElement('option');
        option.value = claimType;
        option.textContent = claimType;
        claimTypeSelect.appendChild(option);
    });
    
    if (currentValue && window.claimTypeData.includes(currentValue)) {
        claimTypeSelect.value = currentValue;
    }
}

// „Ç≥„Éº„ÉâÂêçÁß∞ÁÆ°ÁêÜË°®Á§∫
function displayCodeNameManagement() {
    // Êó¢„Å´HTML„Å´ÂÆüË£ÖÊ∏à„Åø„ÅÆ„Åü„ÇÅ„ÄÅÁèæÂú®„ÅÆÂÄ§„ÅßÂàùÊúüÂåñ
    const code1NameInput = document.getElementById('code1Name');
    const code2NameInput = document.getElementById('code2Name');
    const code3NameInput = document.getElementById('code3Name');
    
    if (code1NameInput) code1NameInput.value = window.codeNames.code1 || '„Ç≥„Éº„Éâ1';
    if (code2NameInput) code2NameInput.value = window.codeNames.code2 || '„Ç≥„Éº„Éâ2';
    if (code3NameInput) code3NameInput.value = window.codeNames.code3 || '„Ç≥„Éº„Éâ3';
    
    updateCodeLabels();
}

// „Ç≥„Éº„ÉâÂêçÁß∞Êõ¥Êñ∞
window.updateCodeName = function(codeNumber) {
    const nameInput = document.getElementById(`code${codeNumber}Name`);
    if (nameInput) {
        const newName = nameInput.value.trim() || `„Ç≥„Éº„Éâ${codeNumber}`;
        window.codeNames[`code${codeNumber}`] = newName;
        updateCodeLabels();
    }
}

// „Ç≥„Éº„ÉâÂêçÁß∞‰øùÂ≠ò
window.saveCodeNames = function() {
    try {
        localStorage.setItem('bananaCodeNames', JSON.stringify(window.codeNames));
        updateCodeLabels();
        alert('‚úÖ „Ç≥„Éº„ÉâÂêçÁß∞„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
    } catch (error) {
        console.error('„Ç≥„Éº„ÉâÂêçÁß∞‰øùÂ≠ò„Ç®„É©„Éº:', error);
        alert('‚ùå ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
}

// „Ç≥„Éº„Éâ„É©„Éô„É´Êõ¥Êñ∞
function updateCodeLabels() {
    const labels = ['code1Label', 'code2Label', 'code3Label'];
    labels.forEach((labelId, index) => {
        const label = document.getElementById(labelId);
        if (label) {
            const codeKey = `code${index + 1}`;
            label.textContent = window.codeNames[codeKey] || `„Ç≥„Éº„Éâ${index + 1}`;
        }
    });
}

// „Éï„Ç©„Éº„É†Ë¶ÅÁ¥†ÂàùÊúüÂåñ
function initializeFormElements() {
    // „ÉÅ„Çß„Éº„É≥ÈÅ∏ÊäûÂ§âÊõ¥ÊôÇ„ÅÆ„Ç§„Éô„É≥„Éà
    const chainSelect = document.getElementById('chainName');
    if (chainSelect) {
        chainSelect.addEventListener('change', updateStoreOptions);
    }
    
    // ÂàùÊúüÈÅ∏ÊäûËÇ¢Ë®≠ÂÆö
    updateChainOptions();
    updateStoreOptions();
    updateProductOptions();
    updateClaimTypeOptions();
    updateCodeLabels();
}

// „É≠„Ç∞„Ç¢„Ç¶„Éà
function handleLogout() {
    if (confirm('„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åô„ÅãÔºü')) {
        currentUser = null;
        currentImageData = null;
        analysisResult = null;
        visualJudgment = null;
        
        // ÁîªÈù¢Âàá„ÇäÊõø„Åà
        document.getElementById('mainScreen').classList.add('hidden');
        document.getElementById('authScreen').classList.remove('hidden');
        
        // „Éï„Ç©„Éº„É†„ÇØ„É™„Ç¢
        document.getElementById('userId').value = '';
        document.getElementById('password').value = '';
        document.getElementById('loginError').classList.add('hidden');
        
        console.log('„É≠„Ç∞„Ç¢„Ç¶„ÉàÂÆå‰∫Ü');
    }
}

// „Éû„Çπ„Çø„Éá„Éº„Çø„Çª„ÇØ„Ç∑„Éß„É≥ÈñãÈñâ
window.toggleMasterDataSection = function() {
    const content = document.getElementById('masterDataContent');
    const icon = document.getElementById('masterDataToggleIcon');
    
    if (content && icon) {
        if (content.style.display === 'none') {
            content.style.display = 'block';
            icon.textContent = '‚ñº';
        } else {
            content.style.display = 'none';
            icon.textContent = '‚ñ∂';
        }
    }
}

// üîí „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ê≥®ÊÑèÔºö‰ª•‰∏ã„ÅÆÊ©üËÉΩ„ÅØSupabase„Å´ÁßªË°åÊ∏à„Åø„ÅÆ„Åü„ÇÅ„Ç≥„É°„É≥„Éà„Ç¢„Ç¶„Éà
// COLOR_SETTINGS, COLOR_JUDGMENT_RULES, BANANA_COLOR_RANGES„ÅÆÁÆ°ÁêÜÊ©üËÉΩ„ÅØ
// ‰ºÅÊ•≠ÁßòÂØÜ‰øùË≠∑„ÅÆ„Åü„ÇÅ„ÄÅSupabaseÈñ¢Êï∞„Å®„Åó„Å¶ÂÆüË£ÖÊ∏à„Åø

console.log('üîí „Éê„Éä„Éä„É¨„Éù„Éº„Çø„Éº v8.0 Áµ±ÂêàÁâà Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
console.log('‚ö° Ê†∏ÂøÉÊäÄË°ì„ÅØSupabaseÈñ¢Êï∞„Åß‰øùË≠∑„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
console.log('‚úÖ ÁÆ°ÁêÜËÄÖÊ©üËÉΩ„ÉªCSV/„É°„Éº„É´Âá∫Âäõ„Éª„Çπ„Éû„ÉõÂØæÂøú„ÇíÁµ±Âêà');
